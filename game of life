class Solution {
private:
    int countNeighbour(vector<vector<int>>& board, int& i, int& j, int& m, int& n)
    {
        int neighbour = 0;

        //right
        if(j+1 < n && board[i][j+1] > 0)
            neighbour++;
        //left
        if(j-1 >= 0 && board[i][j-1] > 0)
            neighbour++;
        //up
        if(i-1 >= 0 && board[i-1][j] > 0)
            neighbour++;
        //down
        if(i+1 < m && board[i+1][j] > 0)
            neighbour++;
        //left-up
        if(j-1 >= 0 && i-1 >= 0 && board[i-1][j-1] > 0)
            neighbour++;
        //left-down
        if(j-1 >= 0 && i+1 < m && board[i+1][j-1] > 0)
            neighbour++;
        //right-up
        if(j+1 < n && i-1 >= 0 && board[i-1][j+1] > 0)
            neighbour++;
        //right-down
        if(j+1 < n && i+1 < m && board[i+1][j+1] > 0)
            neighbour++;
        
        return neighbour;
    }

public:
    void gameOfLife(vector<vector<int>>& board) 
    {
        int m = board.size();
        int n = board[0].size();

        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                int neighbour = countNeighbour(board, i, j, m, n);
                if(board[i][j] == 1)
                    board[i][j] = max(board[i][j], neighbour);
                else
                    board[i][j] = -1*neighbour;
            }
        }    

        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(board[i][j] == 2 || board[i][j] == 3 || board[i][j] == -3)
                    board[i][j] = 1;
                else
                    board[i][j] = 0;
            }
        }

    }
};
